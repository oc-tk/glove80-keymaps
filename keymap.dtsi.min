#define DIFFICULTY_LEVEL 5 
#define ENFORCE_BILATERAL 
#ifdef DIFFICULTY_LEVEL
#if DIFFICULTY_LEVEL == 1
#define CAPPY_HOLDING_TIME 500
#define HOMEY_HOLDING_TIME 500
#define INDEX_HOLDING_TIME 500
#define PLAIN_HOLDING_TIME 500
#define SPACE_HOLDING_TIME 500
#elif DIFFICULTY_LEVEL == 2
#define CAPPY_HOLDING_TIME 400
#define HOMEY_HOLDING_TIME 400
#define INDEX_HOLDING_TIME 400
#define PLAIN_HOLDING_TIME 400
#define SPACE_HOLDING_TIME 400
#elif DIFFICULTY_LEVEL == 3
#define CAPPY_HOLDING_TIME 300
#define HOMEY_HOLDING_TIME 300
#define INDEX_HOLDING_TIME 300
#define PLAIN_HOLDING_TIME 300
#define SPACE_HOLDING_TIME 300
#elif DIFFICULTY_LEVEL == 4
#define CAPPY_HOLDING_TIME 200
#define HOMEY_HOLDING_TIME 200
#define INDEX_HOLDING_TIME 200
#define PLAIN_HOLDING_TIME 200
#define SPACE_HOLDING_TIME 200
#endif
#endif
#ifndef OPERATING_SYSTEM
#define OPERATING_SYSTEM 1 
#endif
#if OPERATING_SYSTEM == 2
#define _C LG
#define _A_TAB LGUI
#define _G_TAB LALT
#define _REDO _C(LS(Z))
#define _POWER K_POWER
#define _W LA
#define _HOME _C(LEFT)
#define _END _C(RIGHT)
#else
#define _C LC
#define _A_TAB LALT
#define _G_TAB LGUI
#define _REDO _C(Y)
#define _POWER C_POWER
#define _W _C
#define _HOME HOME
#define _END END
#endif
#define _SLEEP C_SLEEP
#if OPERATING_SYSTEM == 3
#define _LOCK LG(L)
#elif OPERATING_SYSTEM == 2
#define _LOCK _C(LC(Q))
#elif OPERATING_SYSTEM == 1
#define _LOCK K_LOCK
#endif
#define _UNDO _C(Z)
#define _CUT _C(X)
#define _COPY _C(C)
#define _PASTE _C(V)
#define _FIND _C(F)
#define _FIND_NEXT _C(G)
#define _FIND_PREV _C(LS(G))
#undef AMPS
#define AMPS LS(N7)
#undef AT
#define AT LS(N2)
#undef CARET
#define CARET LS(N6)
#undef COLON
#define COLON LS(SEMI)
#undef DLLR
#define DLLR LS(N4)
#undef DQT
#define DQT LS(SQT)
#undef EXCL
#define EXCL LS(N1)
#undef GT
#define GT LS(DOT)
#undef HASH
#define HASH LS(N3)
#undef LBRC
#define LBRC LS(LBKT)
#undef LPAR
#define LPAR LS(N9)
#undef LT
#define LT LS(COMMA)
#undef PIPE
#define PIPE LS(BSLH)
#undef PLUS
#define PLUS LS(EQUAL)
#undef PRCNT
#define PRCNT LS(N5)
#undef QMARK
#define QMARK LS(FSLH)
#undef RBRC
#define RBRC LS(RBKT)
#undef RPAR
#define RPAR LS(N0)
#undef STAR
#define STAR LS(N8)
#undef TILDE
#define TILDE LS(GRAVE)
#undef UNDER
#define UNDER LS(MINUS)
#if defined(LAYER_Colemak) && LAYER_Colemak == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 INS
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 EQUAL
#define KEY_LH_C5R3 Q
#define KEY_LH_C4R3 W
#define KEY_LH_C3R3 F
#define KEY_LH_C2R3 P
#define KEY_LH_C1R3 G
#define KEY_RH_C1R3 J
#define KEY_RH_C2R3 L
#define KEY_RH_C3R3 U
#define KEY_RH_C4R3 Y
#define KEY_RH_C5R3 SEMI
#define KEY_RH_C6R3 MINUS
#define KEY_LH_C6R4 TAB
#define KEY_LH_C5R4 A
#define KEY_LH_C4R4 R
#define KEY_LH_C3R4 S
#define KEY_LH_C2R4 T
#define KEY_LH_C1R4 D
#define KEY_RH_C1R4 H
#define KEY_RH_C2R4 N
#define KEY_RH_C3R4 E
#define KEY_RH_C4R4 I
#define KEY_RH_C5R4 O
#define KEY_RH_C6R4 SQT
#define KEY_LH_C6R5 GRAVE
#define KEY_LH_C5R5 Z
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 C
#define KEY_LH_C2R5 V
#define KEY_LH_C1R5 B
#define KEY_LH_T1 LSHFT
#define KEY_LH_T2 LCTRL
#define KEY_LH_T3 0
#define KEY_RH_T3 RGUI
#define KEY_RH_T2 RCTRL
#define KEY_RH_T1 RSHFT
#define KEY_RH_C1R5 K
#define KEY_RH_C2R5 M
#define KEY_RH_C3R5 COMMA
#define KEY_RH_C4R5 DOT
#define KEY_RH_C5R5 FSLH
#define KEY_RH_C6R5 PG_UP
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 END
#define KEY_LH_C3R6 LEFT
#define KEY_LH_C2R6 RIGHT
#define KEY_LH_T4 BSPC
#define KEY_LH_T5 ESC
#define KEY_LH_T6 DEL
#define KEY_RH_T6 RALT
#define KEY_RH_T5 RET
#define KEY_RH_T4 SPACE
#define KEY_RH_C2R6 DOWN
#define KEY_RH_C3R6 UP
#define KEY_RH_C4R6 LBKT
#define KEY_RH_C5R6 RBKT
#define KEY_RH_C6R6 PG_DN
#endif
#if defined(LAYER_Engrammer) && LAYER_Engrammer == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 B
#define KEY_LH_C4R3 Y
#define KEY_LH_C3R3 O
#define KEY_LH_C2R3 U
#define KEY_LH_C1R3 SQT
#define KEY_RH_C1R3 SEMI
#define KEY_RH_C2R3 L
#define KEY_RH_C3R3 D
#define KEY_RH_C4R3 W
#define KEY_RH_C5R3 V
#define KEY_RH_C6R3 Z
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 C
#define KEY_LH_C4R4 I
#define KEY_LH_C3R4 E
#define KEY_LH_C2R4 A
#define KEY_LH_C1R4 COMMA
#define KEY_RH_C1R4 DOT
#define KEY_RH_C2R4 H
#define KEY_RH_C3R4 T
#define KEY_RH_C4R4 S
#define KEY_RH_C5R4 N
#define KEY_RH_C6R4 Q
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 G
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 J
#define KEY_LH_C2R5 K
#define KEY_LH_C1R5 MINUS
#define KEY_LH_T1 ESC
#define KEY_LH_T2 UP
#define KEY_LH_T3 DOWN
#define KEY_RH_T3 LEFT
#define KEY_RH_T2 RIGHT
#define KEY_RH_T1 ENTER
#define KEY_RH_C1R5 FSLH
#define KEY_RH_C2R5 R
#define KEY_RH_C3R5 M
#define KEY_RH_C4R5 F
#define KEY_RH_C5R5 P
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_LH_T4 BACKSPACE
#define KEY_LH_T5 DELETE
#define KEY_LH_T6 0
#define KEY_RH_T6 0
#define KEY_RH_T5 TAB
#define KEY_RH_T4 SPACE
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if defined(LAYER_Engram) && LAYER_Engram == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 LBKT
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 RBKT
#define KEY_LH_C6R3 AT
#define KEY_LH_C5R3 B
#define KEY_LH_C4R3 Y
#define KEY_LH_C3R3 O
#define KEY_LH_C2R3 U
#define KEY_LH_C1R3 SQT
#define KEY_RH_C1R3 DQT
#define KEY_RH_C2R3 L
#define KEY_RH_C3R3 D
#define KEY_RH_C4R3 W
#define KEY_RH_C5R3 V
#define KEY_RH_C6R3 Z
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 C
#define KEY_LH_C4R4 I
#define KEY_LH_C3R4 E
#define KEY_LH_C2R4 A
#define KEY_LH_C1R4 COMMA
#define KEY_RH_C1R4 DOT
#define KEY_RH_C2R4 H
#define KEY_RH_C3R4 T
#define KEY_RH_C4R4 S
#define KEY_RH_C5R4 N
#define KEY_RH_C6R4 Q
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 G
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 J
#define KEY_LH_C2R5 K
#define KEY_LH_C1R5 MINUS
#define KEY_LH_T1 ESC
#define KEY_LH_T2 UP
#define KEY_LH_T3 DOWN
#define KEY_RH_T3 LEFT
#define KEY_RH_T2 RIGHT
#define KEY_RH_T1 ENTER
#define KEY_RH_C1R5 QMARK
#define KEY_RH_C2R5 R
#define KEY_RH_C3R5 M
#define KEY_RH_C4R5 F
#define KEY_RH_C5R5 P
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_LH_T4 BACKSPACE
#define KEY_LH_T5 DELETE
#define KEY_LH_T6 0
#define KEY_RH_T6 0
#define KEY_RH_T5 TAB
#define KEY_RH_T4 SPACE
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 HASH
#define KEY_RH_C4R6 FSLH
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if defined(LAYER_Dvorak) && LAYER_Dvorak == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 SQT
#define KEY_LH_C4R3 COMMA
#define KEY_LH_C3R3 DOT
#define KEY_LH_C2R3 P
#define KEY_LH_C1R3 Y
#define KEY_RH_C1R3 F
#define KEY_RH_C2R3 G
#define KEY_RH_C3R3 C
#define KEY_RH_C4R3 R
#define KEY_RH_C5R3 L
#define KEY_RH_C6R3 SLASH
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 A
#define KEY_LH_C4R4 O
#define KEY_LH_C3R4 E
#define KEY_LH_C2R4 U
#define KEY_LH_C1R4 I
#define KEY_RH_C1R4 D
#define KEY_RH_C2R4 H
#define KEY_RH_C3R4 T
#define KEY_RH_C4R4 N
#define KEY_RH_C5R4 S
#define KEY_RH_C6R4 MINUS
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 SEMI
#define KEY_LH_C4R5 Q
#define KEY_LH_C3R5 J
#define KEY_LH_C2R5 K
#define KEY_LH_C1R5 X
#define KEY_LH_T1 ESC
#define KEY_LH_T2 UP
#define KEY_LH_T3 DOWN
#define KEY_RH_T3 LEFT
#define KEY_RH_T2 RIGHT
#define KEY_RH_T1 ENTER
#define KEY_RH_C1R5 B
#define KEY_RH_C2R5 M
#define KEY_RH_C3R5 W
#define KEY_RH_C4R5 V
#define KEY_RH_C5R5 Z
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_LH_T4 BACKSPACE
#define KEY_LH_T5 DELETE
#define KEY_LH_T6 0
#define KEY_RH_T6 0
#define KEY_RH_T5 TAB
#define KEY_RH_T4 SPACE
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if defined(LAYER_Workman) && LAYER_Workman == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 Q
#define KEY_LH_C4R3 D
#define KEY_LH_C3R3 R
#define KEY_LH_C2R3 W
#define KEY_LH_C1R3 B
#define KEY_RH_C1R3 J
#define KEY_RH_C2R3 F
#define KEY_RH_C3R3 U
#define KEY_RH_C4R3 P
#define KEY_RH_C5R3 SEMI
#define KEY_RH_C6R3 MINUS
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 A
#define KEY_LH_C4R4 S
#define KEY_LH_C3R4 H
#define KEY_LH_C2R4 T
#define KEY_LH_C1R4 G
#define KEY_RH_C1R4 Y
#define KEY_RH_C2R4 N
#define KEY_RH_C3R4 E
#define KEY_RH_C4R4 O
#define KEY_RH_C5R4 I
#define KEY_RH_C6R4 SQT
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 Z
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 M
#define KEY_LH_C2R5 C
#define KEY_LH_C1R5 V
#define KEY_LH_T1 ESC
#define KEY_LH_T2 UP
#define KEY_LH_T3 DOWN
#define KEY_RH_T3 LEFT
#define KEY_RH_T2 RIGHT
#define KEY_RH_T1 ENTER
#define KEY_RH_C1R5 K
#define KEY_RH_C2R5 L
#define KEY_RH_C3R5 COMMA
#define KEY_RH_C4R5 DOT
#define KEY_RH_C5R5 FSLH
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_LH_T4 BACKSPACE
#define KEY_LH_T5 DELETE
#define KEY_LH_T6 0
#define KEY_RH_T6 0
#define KEY_RH_T5 TAB
#define KEY_RH_T4 SPACE
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
#if defined(LAYER_QWERTY) && LAYER_QWERTY == 0
#define KEY_LH_C6R1 F1
#define KEY_LH_C5R1 F2
#define KEY_LH_C4R1 F3
#define KEY_LH_C3R1 F4
#define KEY_LH_C2R1 F5
#define KEY_RH_C2R1 F6
#define KEY_RH_C3R1 F7
#define KEY_RH_C4R1 F8
#define KEY_RH_C5R1 F9
#define KEY_RH_C6R1 F10
#define KEY_LH_C6R2 EQUAL
#define KEY_LH_C5R2 N1
#define KEY_LH_C4R2 N2
#define KEY_LH_C3R2 N3
#define KEY_LH_C2R2 N4
#define KEY_LH_C1R2 N5
#define KEY_RH_C1R2 N6
#define KEY_RH_C2R2 N7
#define KEY_RH_C3R2 N8
#define KEY_RH_C4R2 N9
#define KEY_RH_C5R2 N0
#define KEY_RH_C6R2 BSLH
#define KEY_LH_C6R3 GRAVE
#define KEY_LH_C5R3 Q
#define KEY_LH_C4R3 W
#define KEY_LH_C3R3 E
#define KEY_LH_C2R3 R
#define KEY_LH_C1R3 T
#define KEY_RH_C1R3 Y
#define KEY_RH_C2R3 U
#define KEY_RH_C3R3 I
#define KEY_RH_C4R3 O
#define KEY_RH_C5R3 P
#define KEY_RH_C6R3 MINUS
#define KEY_LH_C6R4 CAPSLOCK
#define KEY_LH_C5R4 A
#define KEY_LH_C4R4 S
#define KEY_LH_C3R4 D
#define KEY_LH_C2R4 F
#define KEY_LH_C1R4 G
#define KEY_RH_C1R4 H
#define KEY_RH_C2R4 J
#define KEY_RH_C3R4 K
#define KEY_RH_C4R4 L
#define KEY_RH_C5R4 SEMI
#define KEY_RH_C6R4 SQT
#define KEY_LH_C6R5 LSHFT
#define KEY_LH_C5R5 Z
#define KEY_LH_C4R5 X
#define KEY_LH_C3R5 C
#define KEY_LH_C2R5 V
#define KEY_LH_C1R5 B
#define KEY_LH_T1 ESC
#define KEY_LH_T2 UP
#define KEY_LH_T3 DOWN
#define KEY_RH_T3 LEFT
#define KEY_RH_T2 RIGHT
#define KEY_RH_T1 ENTER
#define KEY_RH_C1R5 N
#define KEY_RH_C2R5 M
#define KEY_RH_C3R5 COMMA
#define KEY_RH_C4R5 DOT
#define KEY_RH_C5R5 FSLH
#define KEY_RH_C6R5 RSHFT
#define KEY_LH_C6R6 0
#define KEY_LH_C5R6 HOME
#define KEY_LH_C4R6 PG_UP
#define KEY_LH_C3R6 PG_DN
#define KEY_LH_C2R6 END
#define KEY_LH_T4 BACKSPACE
#define KEY_LH_T5 DELETE
#define KEY_LH_T6 0
#define KEY_RH_T6 0
#define KEY_RH_T5 TAB
#define KEY_RH_T4 SPACE
#define KEY_RH_C2R6 LPAR
#define KEY_RH_C3R6 LBKT
#define KEY_RH_C4R6 RBKT
#define KEY_RH_C5R6 RPAR
#define KEY_RH_C6R6 0
#endif
behaviors {
#ifndef PINKY_FINGER_MOD
#if OPERATING_SYSTEM == 2
#define PINKY_FINGER_MOD LCTL
#else
#define PINKY_FINGER_MOD LGUI
#endif
#endif
#ifndef RING1_FINGER_MOD
#define RING1_FINGER_MOD LALT
#endif
#ifndef RING2_FINGER_MOD
#define RING2_FINGER_MOD RALT
#endif
#ifndef MIDDY_FINGER_MOD
#if OPERATING_SYSTEM == 2
#define MIDDY_FINGER_MOD LGUI
#else
#define MIDDY_FINGER_MOD LCTL
#endif
#endif
#ifndef INDEX_FINGER_MOD
#define INDEX_FINGER_MOD LSFT
#endif
#ifndef LEFT_PINKY_MOD
#define LEFT_PINKY_MOD PINKY_FINGER_MOD
#endif
#ifndef RIGHT_PINKY_MOD
#define RIGHT_PINKY_MOD PINKY_FINGER_MOD
#endif
#ifndef LEFT_RING1_MOD
#define LEFT_RING1_MOD RING1_FINGER_MOD
#endif
#ifndef RIGHT_RING1_MOD
#define RIGHT_RING1_MOD RING1_FINGER_MOD
#endif
#ifndef LEFT_RING2_MOD
#define LEFT_RING2_MOD RING2_FINGER_MOD
#endif
#ifndef RIGHT_RING2_MOD
#define RIGHT_RING2_MOD RING2_FINGER_MOD
#endif
#ifndef LEFT_MIDDY_MOD
#define LEFT_MIDDY_MOD MIDDY_FINGER_MOD
#endif
#ifndef RIGHT_MIDDY_MOD
#define RIGHT_MIDDY_MOD MIDDY_FINGER_MOD
#endif
#ifndef LEFT_INDEX_MOD
#define LEFT_INDEX_MOD INDEX_FINGER_MOD
#endif
#ifndef RIGHT_INDEX_MOD
#define RIGHT_INDEX_MOD INDEX_FINGER_MOD
#endif
#ifndef HOMEY_HOLDING_TYPE
#define HOMEY_HOLDING_TYPE "tap-preferred"
#endif
#ifndef HOMEY_HOLDING_TIME
#define HOMEY_HOLDING_TIME 270 
#endif
#ifndef HOMEY_STREAK_DECAY
#define HOMEY_STREAK_DECAY 230
#endif
#ifndef HOMEY_REPEAT_DECAY
#define HOMEY_REPEAT_DECAY 300 
#endif
#ifndef CHORD_HOLDING_TYPE
#define CHORD_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef CHORD_HOLDING_TIME
#define CHORD_HOLDING_TIME 150
#endif
#ifndef CHORD_STREAK_DECAY
#define CHORD_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef CHORD_REPEAT_DECAY
#define CHORD_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef INDEX_HOLDING_TYPE
#define INDEX_HOLDING_TYPE "tap-preferred"
#endif
#ifndef INDEX_HOLDING_TIME
#define INDEX_HOLDING_TIME 170
#endif
#ifndef INDEX_STREAK_DECAY
#define INDEX_STREAK_DECAY 100
#endif
#ifndef INDEX_REPEAT_DECAY
#define INDEX_REPEAT_DECAY 300 
#endif
#ifndef PLAIN_HOLDING_TYPE
#define PLAIN_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef PLAIN_HOLDING_TIME
#define PLAIN_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef PLAIN_STREAK_DECAY
#define PLAIN_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef PLAIN_REPEAT_DECAY
#define PLAIN_REPEAT_DECAY 300 
#endif
#ifndef THUMB_HOLDING_TYPE
#define THUMB_HOLDING_TYPE "balanced"
#endif
#ifndef THUMB_HOLDING_TIME
#define THUMB_HOLDING_TIME 200
#endif
#ifndef THUMB_REPEAT_DECAY
#define THUMB_REPEAT_DECAY 300 
#endif
#ifndef SPACE_HOLDING_TYPE
#define SPACE_HOLDING_TYPE THUMB_HOLDING_TYPE
#endif
#ifndef SPACE_HOLDING_TIME
#define SPACE_HOLDING_TIME THUMB_HOLDING_TIME
#endif
#ifndef SPACE_REPEAT_DECAY
#define SPACE_REPEAT_DECAY 150
#endif
#define LEFT_HAND_KEYS \
0 1 2 3 4 \
10 11 12 13 14 15 \
22 23 24 25 26 27 \
34 35 36 37 38 39 \
46 47 48 49 50 51 \
64 65 66 67 68
#define RIGHT_HAND_KEYS \
5 6 7 8 9 \
16 17 18 19 20 21 \
28 29 30 31 32 33 \
40 41 42 43 44 45 \
58 59 60 61 62 63 \
75 76 77 78 79
#define THUMB_KEYS \
69 52 57 74 \
70 53 56 73 \
71 54 55 72
#define LEFT_PINKY_KEY KEY_LH_C5R4
#define LEFT_RING1_KEY KEY_LH_C4R4
#define LEFT_RING2_KEY KEY_LH_C4R3
#define LEFT_MIDDY_KEY KEY_LH_C3R4
#define LEFT_INDEX_KEY KEY_LH_C2R4
#define LEFT_PLAIN_KEY KEY_LH_C1R4
#define RIGHT_PINKY_KEY KEY_RH_C5R4
#define RIGHT_RING1_KEY KEY_RH_C4R4
#define RIGHT_RING2_KEY KEY_RH_C4R3
#define RIGHT_MIDDY_KEY KEY_RH_C3R4
#define RIGHT_INDEX_KEY KEY_RH_C2R4
#define RIGHT_PLAIN_KEY KEY_RH_C1R4
#ifndef PINKY_HOLDING_TYPE
#define PINKY_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef PINKY_CHORD_HOLDING_TYPE
#define PINKY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_CHORD_HOLDING_TYPE
#define LEFT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_CHORD_HOLDING_TYPE
#define RIGHT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef PINKY_HOLDING_TIME
#define PINKY_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef PINKY_CHORD_HOLDING_TIME
#define PINKY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_CHORD_HOLDING_TIME
#define LEFT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_CHORD_HOLDING_TIME
#define RIGHT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
#endif
#ifndef PINKY_STREAK_DECAY
#define PINKY_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef PINKY_CHORD_STREAK_DECAY
#define PINKY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_CHORD_STREAK_DECAY
#define LEFT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_CHORD_STREAK_DECAY
#define RIGHT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
#endif
#ifndef PINKY_REPEAT_DECAY
#define PINKY_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef PINKY_CHORD_REPEAT_DECAY
#define PINKY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_PINKY_CHORD_REPEAT_DECAY
#define LEFT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_PINKY_CHORD_REPEAT_DECAY
#define RIGHT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
#endif
#ifndef RING1_HOLDING_TYPE
#define RING1_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef RING1_CHORD_HOLDING_TYPE
#define RING1_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_CHORD_HOLDING_TYPE
#define LEFT_RING1_CHORD_HOLDING_TYPE RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_CHORD_HOLDING_TYPE
#define RIGHT_RING1_CHORD_HOLDING_TYPE RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RING1_HOLDING_TIME
#define RING1_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef RING1_CHORD_HOLDING_TIME
#define RING1_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_CHORD_HOLDING_TIME
#define LEFT_RING1_CHORD_HOLDING_TIME RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_CHORD_HOLDING_TIME
#define RIGHT_RING1_CHORD_HOLDING_TIME RING1_CHORD_HOLDING_TIME
#endif
#ifndef RING1_STREAK_DECAY
#define RING1_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef RING1_CHORD_STREAK_DECAY
#define RING1_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_CHORD_STREAK_DECAY
#define LEFT_RING1_CHORD_STREAK_DECAY RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_CHORD_STREAK_DECAY
#define RIGHT_RING1_CHORD_STREAK_DECAY RING1_CHORD_STREAK_DECAY
#endif
#ifndef RING1_REPEAT_DECAY
#define RING1_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef RING1_CHORD_REPEAT_DECAY
#define RING1_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_RING1_CHORD_REPEAT_DECAY
#define LEFT_RING1_CHORD_REPEAT_DECAY RING1_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_RING1_CHORD_REPEAT_DECAY
#define RIGHT_RING1_CHORD_REPEAT_DECAY RING1_CHORD_REPEAT_DECAY
#endif
#ifndef RING2_HOLDING_TYPE
#define RING2_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef RING2_CHORD_HOLDING_TYPE
#define RING2_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_CHORD_HOLDING_TYPE
#define LEFT_RING2_CHORD_HOLDING_TYPE RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_CHORD_HOLDING_TYPE
#define RIGHT_RING2_CHORD_HOLDING_TYPE RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RING2_HOLDING_TIME
#define RING2_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef RING2_CHORD_HOLDING_TIME
#define RING2_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_CHORD_HOLDING_TIME
#define LEFT_RING2_CHORD_HOLDING_TIME RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_CHORD_HOLDING_TIME
#define RIGHT_RING2_CHORD_HOLDING_TIME RING2_CHORD_HOLDING_TIME
#endif
#ifndef RING2_STREAK_DECAY
#define RING2_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef RING2_CHORD_STREAK_DECAY
#define RING2_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_CHORD_STREAK_DECAY
#define LEFT_RING2_CHORD_STREAK_DECAY RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_CHORD_STREAK_DECAY
#define RIGHT_RING2_CHORD_STREAK_DECAY RING2_CHORD_STREAK_DECAY
#endif
#ifndef RING2_REPEAT_DECAY
#define RING2_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef RING2_CHORD_REPEAT_DECAY
#define RING2_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_RING2_CHORD_REPEAT_DECAY
#define LEFT_RING2_CHORD_REPEAT_DECAY RING2_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_RING2_CHORD_REPEAT_DECAY
#define RIGHT_RING2_CHORD_REPEAT_DECAY RING2_CHORD_REPEAT_DECAY
#endif
#ifndef MIDDY_HOLDING_TYPE
#define MIDDY_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef MIDDY_CHORD_HOLDING_TYPE
#define MIDDY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_CHORD_HOLDING_TYPE
#define LEFT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_CHORD_HOLDING_TYPE
#define RIGHT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef MIDDY_HOLDING_TIME
#define MIDDY_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef MIDDY_CHORD_HOLDING_TIME
#define MIDDY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_CHORD_HOLDING_TIME
#define LEFT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_CHORD_HOLDING_TIME
#define RIGHT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef MIDDY_STREAK_DECAY
#define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef MIDDY_CHORD_STREAK_DECAY
#define MIDDY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_CHORD_STREAK_DECAY
#define LEFT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_CHORD_STREAK_DECAY
#define RIGHT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef MIDDY_REPEAT_DECAY
#define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef MIDDY_CHORD_REPEAT_DECAY
#define MIDDY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_MIDDY_CHORD_REPEAT_DECAY
#define LEFT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_MIDDY_CHORD_REPEAT_DECAY
#define RIGHT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
#endif
#ifndef INDEX_HOLDING_TYPE
#define INDEX_HOLDING_TYPE HOMEY_HOLDING_TYPE
#endif
#ifndef INDEX_CHORD_HOLDING_TYPE
#define INDEX_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_CHORD_HOLDING_TYPE
#define LEFT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_CHORD_HOLDING_TYPE
#define RIGHT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef INDEX_HOLDING_TIME
#define INDEX_HOLDING_TIME HOMEY_HOLDING_TIME
#endif
#ifndef INDEX_CHORD_HOLDING_TIME
#define INDEX_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_CHORD_HOLDING_TIME
#define LEFT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_CHORD_HOLDING_TIME
#define RIGHT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
#endif
#ifndef INDEX_STREAK_DECAY
#define INDEX_STREAK_DECAY HOMEY_STREAK_DECAY
#endif
#ifndef INDEX_CHORD_STREAK_DECAY
#define INDEX_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_CHORD_STREAK_DECAY
#define LEFT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_CHORD_STREAK_DECAY
#define RIGHT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
#endif
#ifndef INDEX_REPEAT_DECAY
#define INDEX_REPEAT_DECAY HOMEY_REPEAT_DECAY
#endif
#ifndef INDEX_CHORD_REPEAT_DECAY
#define INDEX_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_INDEX_CHORD_REPEAT_DECAY
#define LEFT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
#endif
#ifndef RIGHT_INDEX_CHORD_REPEAT_DECAY
#define RIGHT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
#endif
#ifndef LEFT_PINKY_HOLDING_TYPE
#define LEFT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_HOLDING_TIME
#define LEFT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_STREAK_DECAY
#define LEFT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_REPEAT_DECAY
#define LEFT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
#endif
left_pinky: homey_left_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_pinky_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_pinky_hold: homey_left_pinky_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftPinky>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftPinky>
;
};
left_pinky_tap: homey_left_pinky_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp LEFT_PINKY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftPinky(key) left_pinky LEFT_PINKY_MOD key
#ifndef RIGHT_PINKY_HOLDING_TYPE
#define RIGHT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_HOLDING_TIME
#define RIGHT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_STREAK_DECAY
#define RIGHT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_REPEAT_DECAY
#define RIGHT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
#endif
right_pinky: homey_right_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_pinky_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_pinky_hold: homey_right_pinky_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightPinky>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightPinky>
;
};
right_pinky_tap: homey_right_pinky_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp RIGHT_PINKY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightPinky(key) right_pinky RIGHT_PINKY_MOD key
#ifndef LEFT_RING1_HOLDING_TYPE
#define LEFT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_HOLDING_TIME
#define LEFT_RING1_HOLDING_TIME RING1_HOLDING_TIME
#endif
#ifndef LEFT_RING1_STREAK_DECAY
#define LEFT_RING1_STREAK_DECAY RING1_STREAK_DECAY
#endif
#ifndef LEFT_RING1_REPEAT_DECAY
#define LEFT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY
#endif
left_ring1: homey_left_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_ring1_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_ring1_hold: homey_left_ring1_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing1>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing1>
;
};
left_ring1_tap: homey_left_ring1_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp LEFT_RING1_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftRing1(key) left_ring1 LEFT_RING1_MOD key
#ifndef RIGHT_RING1_HOLDING_TYPE
#define RIGHT_RING1_HOLDING_TYPE RING1_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_HOLDING_TIME
#define RIGHT_RING1_HOLDING_TIME RING1_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_STREAK_DECAY
#define RIGHT_RING1_STREAK_DECAY RING1_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_REPEAT_DECAY
#define RIGHT_RING1_REPEAT_DECAY RING1_REPEAT_DECAY
#endif
right_ring1: homey_right_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_ring1_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_ring1_hold: homey_right_ring1_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing1>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing1>
;
};
right_ring1_tap: homey_right_ring1_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp RIGHT_RING1_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightRing1(key) right_ring1 RIGHT_RING1_MOD key
#ifndef LEFT_RING2_HOLDING_TYPE
#define LEFT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_HOLDING_TIME
#define LEFT_RING2_HOLDING_TIME RING2_HOLDING_TIME
#endif
#ifndef LEFT_RING2_STREAK_DECAY
#define LEFT_RING2_STREAK_DECAY RING2_STREAK_DECAY
#endif
#ifndef LEFT_RING2_REPEAT_DECAY
#define LEFT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY
#endif
left_ring2: homey_left_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_ring2_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_ring2_hold: homey_left_ring2_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing2>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftRing2>
;
};
left_ring2_tap: homey_left_ring2_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp LEFT_RING2_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftRing2(key) left_ring2 LEFT_RING2_MOD key
#ifndef RIGHT_RING2_HOLDING_TYPE
#define RIGHT_RING2_HOLDING_TYPE RING2_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_HOLDING_TIME
#define RIGHT_RING2_HOLDING_TIME RING2_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_STREAK_DECAY
#define RIGHT_RING2_STREAK_DECAY RING2_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_REPEAT_DECAY
#define RIGHT_RING2_REPEAT_DECAY RING2_REPEAT_DECAY
#endif
right_ring2: homey_right_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_ring2_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_ring2_hold: homey_right_ring2_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing2>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightRing2>
;
};
right_ring2_tap: homey_right_ring2_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp RIGHT_RING2_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightRing2(key) right_ring2 RIGHT_RING2_MOD key
#ifndef LEFT_MIDDY_HOLDING_TYPE
#define LEFT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_HOLDING_TIME
#define LEFT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_STREAK_DECAY
#define LEFT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_REPEAT_DECAY
#define LEFT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
#endif
left_middy: homey_left_middy {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_middy_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_middy_hold: homey_left_middy_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftMiddy>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftMiddy>
;
};
left_middy_tap: homey_left_middy_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp LEFT_MIDDY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftMiddy(key) left_middy LEFT_MIDDY_MOD key
#ifndef RIGHT_MIDDY_HOLDING_TYPE
#define RIGHT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_HOLDING_TIME
#define RIGHT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_STREAK_DECAY
#define RIGHT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_REPEAT_DECAY
#define RIGHT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
#endif
right_middy: homey_right_middy {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_middy_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_middy_hold: homey_right_middy_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightMiddy>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightMiddy>
;
};
right_middy_tap: homey_right_middy_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp RIGHT_MIDDY_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightMiddy(key) right_middy RIGHT_MIDDY_MOD key
#ifndef LEFT_INDEX_HOLDING_TYPE
#define LEFT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_HOLDING_TIME
#define LEFT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_STREAK_DECAY
#define LEFT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_REPEAT_DECAY
#define LEFT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
#endif
left_index: homey_left_index {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&left_index_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
left_index_hold: homey_left_index_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_LeftIndex>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_LeftIndex>
;
};
left_index_tap: homey_left_index_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp LEFT_INDEX_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define LeftIndex(key) left_index LEFT_INDEX_MOD key
#ifndef RIGHT_INDEX_HOLDING_TYPE
#define RIGHT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_HOLDING_TIME
#define RIGHT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_STREAK_DECAY
#define RIGHT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_REPEAT_DECAY
#define RIGHT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
#endif
right_index: homey_right_index {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&right_index_hold>, <&kp>;
#else
bindings = <&kp>, <&kp>;
#endif
};
right_index_hold: homey_right_index_hold {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER
&mo LAYER_RightIndex>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER
&mo LAYER_RightIndex>
;
};
right_index_tap: homey_right_index_tap {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_release
&kp LSFT &kp RSFT
&kp LALT &kp RALT
&kp LCTL &kp RCTL
&kp LGUI &kp RGUI>
, <&macro_tap &kp RIGHT_INDEX_KEY>
, <&macro_param_1to1>
, <&macro_tap &kp MACRO_PLACEHOLDER>
;
};
#define RightIndex(key) right_index RIGHT_INDEX_MOD key
#ifndef LEFT_RING1_PINKY_HOLDING_TYPE
#define LEFT_RING1_PINKY_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_PINKY_HOLDING_TIME
#define LEFT_RING1_PINKY_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_PINKY_STREAK_DECAY
#define LEFT_RING1_PINKY_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_PINKY_REPEAT_DECAY
#define LEFT_RING1_PINKY_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_pinky: homey_left_ring1_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Pinky left_ring1_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef LEFT_RING2_PINKY_HOLDING_TYPE
#define LEFT_RING2_PINKY_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_PINKY_HOLDING_TIME
#define LEFT_RING2_PINKY_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_PINKY_STREAK_DECAY
#define LEFT_RING2_PINKY_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_PINKY_REPEAT_DECAY
#define LEFT_RING2_PINKY_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_pinky: homey_left_ring2_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Pinky left_ring2_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef LEFT_MIDDY_PINKY_HOLDING_TYPE
#define LEFT_MIDDY_PINKY_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_PINKY_HOLDING_TIME
#define LEFT_MIDDY_PINKY_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_PINKY_STREAK_DECAY
#define LEFT_MIDDY_PINKY_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_PINKY_REPEAT_DECAY
#define LEFT_MIDDY_PINKY_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_pinky: homey_left_middy_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyPinky left_middy_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef LEFT_INDEX_PINKY_HOLDING_TYPE
#define LEFT_INDEX_PINKY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_PINKY_HOLDING_TIME
#define LEFT_INDEX_PINKY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_PINKY_STREAK_DECAY
#define LEFT_INDEX_PINKY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_PINKY_REPEAT_DECAY
#define LEFT_INDEX_PINKY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_pinky: homey_left_index_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexPinky left_index_pinky LEFT_PINKY_MOD LEFT_PINKY_KEY
#ifndef RIGHT_RING1_PINKY_HOLDING_TYPE
#define RIGHT_RING1_PINKY_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_PINKY_HOLDING_TIME
#define RIGHT_RING1_PINKY_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_PINKY_STREAK_DECAY
#define RIGHT_RING1_PINKY_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_PINKY_REPEAT_DECAY
#define RIGHT_RING1_PINKY_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_pinky: homey_right_ring1_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Pinky right_ring1_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef RIGHT_RING2_PINKY_HOLDING_TYPE
#define RIGHT_RING2_PINKY_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_PINKY_HOLDING_TIME
#define RIGHT_RING2_PINKY_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_PINKY_STREAK_DECAY
#define RIGHT_RING2_PINKY_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_PINKY_REPEAT_DECAY
#define RIGHT_RING2_PINKY_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_pinky: homey_right_ring2_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Pinky right_ring2_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef RIGHT_MIDDY_PINKY_HOLDING_TYPE
#define RIGHT_MIDDY_PINKY_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_PINKY_HOLDING_TIME
#define RIGHT_MIDDY_PINKY_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_PINKY_STREAK_DECAY
#define RIGHT_MIDDY_PINKY_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_PINKY_REPEAT_DECAY
#define RIGHT_MIDDY_PINKY_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_pinky: homey_right_middy_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyPinky right_middy_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef RIGHT_INDEX_PINKY_HOLDING_TYPE
#define RIGHT_INDEX_PINKY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_PINKY_HOLDING_TIME
#define RIGHT_INDEX_PINKY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_PINKY_STREAK_DECAY
#define RIGHT_INDEX_PINKY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_PINKY_REPEAT_DECAY
#define RIGHT_INDEX_PINKY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_pinky: homey_right_index_pinky {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexPinky right_index_pinky RIGHT_PINKY_MOD RIGHT_PINKY_KEY
#ifndef LEFT_PINKY_RING1_HOLDING_TYPE
#define LEFT_PINKY_RING1_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_RING1_HOLDING_TIME
#define LEFT_PINKY_RING1_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_RING1_STREAK_DECAY
#define LEFT_PINKY_RING1_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_RING1_REPEAT_DECAY
#define LEFT_PINKY_RING1_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_ring1: homey_left_pinky_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyRing1 left_pinky_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef LEFT_RING2_RING1_HOLDING_TYPE
#define LEFT_RING2_RING1_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_RING1_HOLDING_TIME
#define LEFT_RING2_RING1_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_RING1_STREAK_DECAY
#define LEFT_RING2_RING1_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_RING1_REPEAT_DECAY
#define LEFT_RING2_RING1_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_ring1: homey_left_ring2_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Ring1 left_ring2_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef LEFT_MIDDY_RING1_HOLDING_TYPE
#define LEFT_MIDDY_RING1_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_RING1_HOLDING_TIME
#define LEFT_MIDDY_RING1_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_RING1_STREAK_DECAY
#define LEFT_MIDDY_RING1_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_RING1_REPEAT_DECAY
#define LEFT_MIDDY_RING1_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_ring1: homey_left_middy_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyRing1 left_middy_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef LEFT_INDEX_RING1_HOLDING_TYPE
#define LEFT_INDEX_RING1_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_RING1_HOLDING_TIME
#define LEFT_INDEX_RING1_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_RING1_STREAK_DECAY
#define LEFT_INDEX_RING1_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_RING1_REPEAT_DECAY
#define LEFT_INDEX_RING1_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_ring1: homey_left_index_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexRing1 left_index_ring1 LEFT_RING1_MOD LEFT_RING1_KEY
#ifndef RIGHT_PINKY_RING1_HOLDING_TYPE
#define RIGHT_PINKY_RING1_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_RING1_HOLDING_TIME
#define RIGHT_PINKY_RING1_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_RING1_STREAK_DECAY
#define RIGHT_PINKY_RING1_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_RING1_REPEAT_DECAY
#define RIGHT_PINKY_RING1_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_ring1: homey_right_pinky_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyRing1 right_pinky_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef RIGHT_RING2_RING1_HOLDING_TYPE
#define RIGHT_RING2_RING1_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_RING1_HOLDING_TIME
#define RIGHT_RING2_RING1_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_RING1_STREAK_DECAY
#define RIGHT_RING2_RING1_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_RING1_REPEAT_DECAY
#define RIGHT_RING2_RING1_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_ring1: homey_right_ring2_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Ring1 right_ring2_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef RIGHT_MIDDY_RING1_HOLDING_TYPE
#define RIGHT_MIDDY_RING1_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_RING1_HOLDING_TIME
#define RIGHT_MIDDY_RING1_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_RING1_STREAK_DECAY
#define RIGHT_MIDDY_RING1_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_RING1_REPEAT_DECAY
#define RIGHT_MIDDY_RING1_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_ring1: homey_right_middy_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyRing1 right_middy_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef RIGHT_INDEX_RING1_HOLDING_TYPE
#define RIGHT_INDEX_RING1_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_RING1_HOLDING_TIME
#define RIGHT_INDEX_RING1_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_RING1_STREAK_DECAY
#define RIGHT_INDEX_RING1_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_RING1_REPEAT_DECAY
#define RIGHT_INDEX_RING1_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_ring1: homey_right_index_ring1 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexRing1 right_index_ring1 RIGHT_RING1_MOD RIGHT_RING1_KEY
#ifndef LEFT_PINKY_RING2_HOLDING_TYPE
#define LEFT_PINKY_RING2_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_RING2_HOLDING_TIME
#define LEFT_PINKY_RING2_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_RING2_STREAK_DECAY
#define LEFT_PINKY_RING2_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_RING2_REPEAT_DECAY
#define LEFT_PINKY_RING2_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_ring2: homey_left_pinky_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyRing2 left_pinky_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef LEFT_RING1_RING2_HOLDING_TYPE
#define LEFT_RING1_RING2_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_RING2_HOLDING_TIME
#define LEFT_RING1_RING2_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_RING2_STREAK_DECAY
#define LEFT_RING1_RING2_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_RING2_REPEAT_DECAY
#define LEFT_RING1_RING2_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_ring2: homey_left_ring1_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Ring2 left_ring1_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef LEFT_MIDDY_RING2_HOLDING_TYPE
#define LEFT_MIDDY_RING2_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_RING2_HOLDING_TIME
#define LEFT_MIDDY_RING2_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_RING2_STREAK_DECAY
#define LEFT_MIDDY_RING2_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_RING2_REPEAT_DECAY
#define LEFT_MIDDY_RING2_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_ring2: homey_left_middy_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyRing2 left_middy_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef LEFT_INDEX_RING2_HOLDING_TYPE
#define LEFT_INDEX_RING2_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_RING2_HOLDING_TIME
#define LEFT_INDEX_RING2_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_RING2_STREAK_DECAY
#define LEFT_INDEX_RING2_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_RING2_REPEAT_DECAY
#define LEFT_INDEX_RING2_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_ring2: homey_left_index_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexRing2 left_index_ring2 LEFT_RING2_MOD LEFT_RING2_KEY
#ifndef RIGHT_PINKY_RING2_HOLDING_TYPE
#define RIGHT_PINKY_RING2_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_RING2_HOLDING_TIME
#define RIGHT_PINKY_RING2_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_RING2_STREAK_DECAY
#define RIGHT_PINKY_RING2_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_RING2_REPEAT_DECAY
#define RIGHT_PINKY_RING2_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_ring2: homey_right_pinky_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyRing2 right_pinky_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef RIGHT_RING1_RING2_HOLDING_TYPE
#define RIGHT_RING1_RING2_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_RING2_HOLDING_TIME
#define RIGHT_RING1_RING2_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_RING2_STREAK_DECAY
#define RIGHT_RING1_RING2_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_RING2_REPEAT_DECAY
#define RIGHT_RING1_RING2_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_ring2: homey_right_ring1_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Ring2 right_ring1_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef RIGHT_MIDDY_RING2_HOLDING_TYPE
#define RIGHT_MIDDY_RING2_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_RING2_HOLDING_TIME
#define RIGHT_MIDDY_RING2_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_RING2_STREAK_DECAY
#define RIGHT_MIDDY_RING2_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_RING2_REPEAT_DECAY
#define RIGHT_MIDDY_RING2_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_ring2: homey_right_middy_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyRing2 right_middy_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef RIGHT_INDEX_RING2_HOLDING_TYPE
#define RIGHT_INDEX_RING2_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_RING2_HOLDING_TIME
#define RIGHT_INDEX_RING2_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_RING2_STREAK_DECAY
#define RIGHT_INDEX_RING2_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_RING2_REPEAT_DECAY
#define RIGHT_INDEX_RING2_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_ring2: homey_right_index_ring2 {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexRing2 right_index_ring2 RIGHT_RING2_MOD RIGHT_RING2_KEY
#ifndef LEFT_PINKY_MIDDY_HOLDING_TYPE
#define LEFT_PINKY_MIDDY_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_MIDDY_HOLDING_TIME
#define LEFT_PINKY_MIDDY_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_MIDDY_STREAK_DECAY
#define LEFT_PINKY_MIDDY_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_MIDDY_REPEAT_DECAY
#define LEFT_PINKY_MIDDY_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_middy: homey_left_pinky_middy {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyMiddy left_pinky_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef LEFT_RING1_MIDDY_HOLDING_TYPE
#define LEFT_RING1_MIDDY_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_MIDDY_HOLDING_TIME
#define LEFT_RING1_MIDDY_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_MIDDY_STREAK_DECAY
#define LEFT_RING1_MIDDY_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_MIDDY_REPEAT_DECAY
#define LEFT_RING1_MIDDY_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_middy: homey_left_ring1_middy {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Middy left_ring1_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef LEFT_RING2_MIDDY_HOLDING_TYPE
#define LEFT_RING2_MIDDY_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_MIDDY_HOLDING_TIME
#define LEFT_RING2_MIDDY_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_MIDDY_STREAK_DECAY
#define LEFT_RING2_MIDDY_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_MIDDY_REPEAT_DECAY
#define LEFT_RING2_MIDDY_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_middy: homey_left_ring2_middy {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Middy left_ring2_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef LEFT_INDEX_MIDDY_HOLDING_TYPE
#define LEFT_INDEX_MIDDY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_INDEX_MIDDY_HOLDING_TIME
#define LEFT_INDEX_MIDDY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_INDEX_MIDDY_STREAK_DECAY
#define LEFT_INDEX_MIDDY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_INDEX_MIDDY_REPEAT_DECAY
#define LEFT_INDEX_MIDDY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
#endif
left_index_middy: homey_left_index_middy {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftIndexMiddy left_index_middy LEFT_MIDDY_MOD LEFT_MIDDY_KEY
#ifndef RIGHT_PINKY_MIDDY_HOLDING_TYPE
#define RIGHT_PINKY_MIDDY_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_MIDDY_HOLDING_TIME
#define RIGHT_PINKY_MIDDY_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_MIDDY_STREAK_DECAY
#define RIGHT_PINKY_MIDDY_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_MIDDY_REPEAT_DECAY
#define RIGHT_PINKY_MIDDY_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_middy: homey_right_pinky_middy {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyMiddy right_pinky_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef RIGHT_RING1_MIDDY_HOLDING_TYPE
#define RIGHT_RING1_MIDDY_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_MIDDY_HOLDING_TIME
#define RIGHT_RING1_MIDDY_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_MIDDY_STREAK_DECAY
#define RIGHT_RING1_MIDDY_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_MIDDY_REPEAT_DECAY
#define RIGHT_RING1_MIDDY_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_middy: homey_right_ring1_middy {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Middy right_ring1_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef RIGHT_RING2_MIDDY_HOLDING_TYPE
#define RIGHT_RING2_MIDDY_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_MIDDY_HOLDING_TIME
#define RIGHT_RING2_MIDDY_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_MIDDY_STREAK_DECAY
#define RIGHT_RING2_MIDDY_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_MIDDY_REPEAT_DECAY
#define RIGHT_RING2_MIDDY_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_middy: homey_right_ring2_middy {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Middy right_ring2_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef RIGHT_INDEX_MIDDY_HOLDING_TYPE
#define RIGHT_INDEX_MIDDY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_INDEX_MIDDY_HOLDING_TIME
#define RIGHT_INDEX_MIDDY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_INDEX_MIDDY_STREAK_DECAY
#define RIGHT_INDEX_MIDDY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_INDEX_MIDDY_REPEAT_DECAY
#define RIGHT_INDEX_MIDDY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
#endif
right_index_middy: homey_right_index_middy {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_INDEX_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_index_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightIndexMiddy right_index_middy RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
#ifndef LEFT_PINKY_INDEX_HOLDING_TYPE
#define LEFT_PINKY_INDEX_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_PINKY_INDEX_HOLDING_TIME
#define LEFT_PINKY_INDEX_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_PINKY_INDEX_STREAK_DECAY
#define LEFT_PINKY_INDEX_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_PINKY_INDEX_REPEAT_DECAY
#define LEFT_PINKY_INDEX_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
#endif
left_pinky_index: homey_left_pinky_index {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftPinkyIndex left_pinky_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef LEFT_RING1_INDEX_HOLDING_TYPE
#define LEFT_RING1_INDEX_HOLDING_TYPE LEFT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING1_INDEX_HOLDING_TIME
#define LEFT_RING1_INDEX_HOLDING_TIME LEFT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING1_INDEX_STREAK_DECAY
#define LEFT_RING1_INDEX_STREAK_DECAY LEFT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING1_INDEX_REPEAT_DECAY
#define LEFT_RING1_INDEX_REPEAT_DECAY LEFT_RING1_CHORD_REPEAT_DECAY
#endif
left_ring1_index: homey_left_ring1_index {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING1_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing1Index left_ring1_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef LEFT_RING2_INDEX_HOLDING_TYPE
#define LEFT_RING2_INDEX_HOLDING_TYPE LEFT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_RING2_INDEX_HOLDING_TIME
#define LEFT_RING2_INDEX_HOLDING_TIME LEFT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_RING2_INDEX_STREAK_DECAY
#define LEFT_RING2_INDEX_STREAK_DECAY LEFT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_RING2_INDEX_REPEAT_DECAY
#define LEFT_RING2_INDEX_REPEAT_DECAY LEFT_RING2_CHORD_REPEAT_DECAY
#endif
left_ring2_index: homey_left_ring2_index {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_RING2_HOLDING_TIME>;
quick-tap-ms = <LEFT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftRing2Index left_ring2_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef LEFT_MIDDY_INDEX_HOLDING_TYPE
#define LEFT_MIDDY_INDEX_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef LEFT_MIDDY_INDEX_HOLDING_TIME
#define LEFT_MIDDY_INDEX_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef LEFT_MIDDY_INDEX_STREAK_DECAY
#define LEFT_MIDDY_INDEX_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef LEFT_MIDDY_INDEX_REPEAT_DECAY
#define LEFT_MIDDY_INDEX_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
#endif
left_middy_index: homey_left_middy_index {
compatible = "zmk,behavior-hold-tap";
flavor = LEFT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&left_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define LeftMiddyIndex left_middy_index LEFT_INDEX_MOD LEFT_INDEX_KEY
#ifndef RIGHT_PINKY_INDEX_HOLDING_TYPE
#define RIGHT_PINKY_INDEX_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_PINKY_INDEX_HOLDING_TIME
#define RIGHT_PINKY_INDEX_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_PINKY_INDEX_STREAK_DECAY
#define RIGHT_PINKY_INDEX_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_PINKY_INDEX_REPEAT_DECAY
#define RIGHT_PINKY_INDEX_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
#endif
right_pinky_index: homey_right_pinky_index {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_PINKY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_pinky_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightPinkyIndex right_pinky_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
#ifndef RIGHT_RING1_INDEX_HOLDING_TYPE
#define RIGHT_RING1_INDEX_HOLDING_TYPE RIGHT_RING1_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING1_INDEX_HOLDING_TIME
#define RIGHT_RING1_INDEX_HOLDING_TIME RIGHT_RING1_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING1_INDEX_STREAK_DECAY
#define RIGHT_RING1_INDEX_STREAK_DECAY RIGHT_RING1_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING1_INDEX_REPEAT_DECAY
#define RIGHT_RING1_INDEX_REPEAT_DECAY RIGHT_RING1_CHORD_REPEAT_DECAY
#endif
right_ring1_index: homey_right_ring1_index {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING1_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING1_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING1_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING1_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring1_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing1Index right_ring1_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
#ifndef RIGHT_RING2_INDEX_HOLDING_TYPE
#define RIGHT_RING2_INDEX_HOLDING_TYPE RIGHT_RING2_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_RING2_INDEX_HOLDING_TIME
#define RIGHT_RING2_INDEX_HOLDING_TIME RIGHT_RING2_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_RING2_INDEX_STREAK_DECAY
#define RIGHT_RING2_INDEX_STREAK_DECAY RIGHT_RING2_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_RING2_INDEX_REPEAT_DECAY
#define RIGHT_RING2_INDEX_REPEAT_DECAY RIGHT_RING2_CHORD_REPEAT_DECAY
#endif
right_ring2_index: homey_right_ring2_index {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_RING2_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_RING2_HOLDING_TIME>;
quick-tap-ms = <RIGHT_RING2_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_RING2_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_ring2_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightRing2Index right_ring2_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
#ifndef RIGHT_MIDDY_INDEX_HOLDING_TYPE
#define RIGHT_MIDDY_INDEX_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
#endif
#ifndef RIGHT_MIDDY_INDEX_HOLDING_TIME
#define RIGHT_MIDDY_INDEX_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
#endif
#ifndef RIGHT_MIDDY_INDEX_STREAK_DECAY
#define RIGHT_MIDDY_INDEX_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
#endif
#ifndef RIGHT_MIDDY_INDEX_REPEAT_DECAY
#define RIGHT_MIDDY_INDEX_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
#endif
right_middy_index: homey_right_middy_index {
compatible = "zmk,behavior-hold-tap";
flavor = RIGHT_MIDDY_HOLDING_TYPE;
hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
hold-trigger-on-release; 
tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
#binding-cells = <2>;
#ifdef ENFORCE_BILATERAL
bindings = <&kp>, <&right_middy_tap>;
#else
bindings = <&kp>, <&kp>;
#endif
};
#define RightMiddyIndex right_middy_index RIGHT_INDEX_MOD RIGHT_INDEX_KEY
plain: plain_typing_layer {
compatible = "zmk,behavior-hold-tap";
flavor = PLAIN_HOLDING_TYPE;
tapping-term-ms = <PLAIN_HOLDING_TIME>;
quick-tap-ms = <PLAIN_REPEAT_DECAY>; 
require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
#binding-cells = <2>;
bindings = <&mo>, <&kp>;
retro-tap; 
};
plain_engram_COMMA: plain_typing_layer_engram_COMMA {
compatible = "zmk,behavior-hold-tap";
flavor = PLAIN_HOLDING_TYPE;
tapping-term-ms = <PLAIN_HOLDING_TIME>;
quick-tap-ms = <PLAIN_REPEAT_DECAY>; 
require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
#binding-cells = <2>;
bindings = <&mo>, <&engram_COMMA>;
retro-tap; 
};
plain_engram_DOT: plain_typing_layer_engram_DOT {
compatible = "zmk,behavior-hold-tap";
flavor = PLAIN_HOLDING_TYPE;
tapping-term-ms = <PLAIN_HOLDING_TIME>;
quick-tap-ms = <PLAIN_REPEAT_DECAY>; 
require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
#binding-cells = <2>;
bindings = <&mo>, <&engram_DOT>;
retro-tap; 
};
thumb: thumb_layer_access {
compatible = "zmk,behavior-hold-tap";
flavor = THUMB_HOLDING_TYPE;
tapping-term-ms = <THUMB_HOLDING_TIME>;
quick-tap-ms = <THUMB_REPEAT_DECAY>; 
#binding-cells = <2>;
bindings = <&mo>, <&kp>;
};
thumb_parang_left: thumb_layer_access_parang_left {
compatible = "zmk,behavior-hold-tap";
flavor = THUMB_HOLDING_TYPE;
tapping-term-ms = <THUMB_HOLDING_TIME>;
quick-tap-ms = <THUMB_REPEAT_DECAY>; 
#binding-cells = <2>;
bindings = <&mo>, <&parang_left>;
};
space: thumb_layer_access_spacebar {
compatible = "zmk,behavior-hold-tap";
flavor = SPACE_HOLDING_TYPE;
tapping-term-ms = <SPACE_HOLDING_TIME>;
quick-tap-ms = <SPACE_REPEAT_DECAY>; 
#binding-cells = <2>;
bindings = <&mo>, <&kp>;
};
#ifndef CAPPY_HOLDING_TIME
#define CAPPY_HOLDING_TIME 500
#endif
cappy: capsword_and_capslock {
compatible = "zmk,behavior-hold-tap";
flavor = "tap-preferred";
tapping-term-ms = <CAPPY_HOLDING_TIME>;
#binding-cells = <2>;
bindings = <&kp>, <&caps_word>;
};
parang_left: left_parenthesis_and_less_than {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp LPAR>, <&kp LT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
parang_right: right_parenthesis_and_greater_than {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp RPAR>, <&kp GT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N1: engram_shift_N1_PIPE {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N1>, <&kp PIPE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N2: engram_shift_N2_EQUAL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N2>, <&kp EQUAL>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N3: engram_shift_N3_TILDE {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N3>, <&kp TILDE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N4: engram_shift_N4_PLUS {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N4>, <&kp PLUS>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N5: engram_shift_N5_LT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N5>, <&kp LT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N6: engram_shift_N6_GT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N6>, <&kp GT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N7: engram_shift_N7_CARET {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N7>, <&kp CARET>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N8: engram_shift_N8_AMPS {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N8>, <&kp AMPS>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N9: engram_shift_N9_PRCNT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N9>, <&kp PRCNT>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_N0: engram_shift_N0_STAR {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp N0>, <&kp STAR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_SQT: engram_shift_SQT_LPAR {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp SQT>, <&kp LPAR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_DQT: engram_shift_DQT_RPAR {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp DQT>, <&kp RPAR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_COMMA: engram_shift_COMMA_SEMI {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp COMMA>, <&kp SEMI>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_DOT: engram_shift_DOT_COLON {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp DOT>, <&kp COLON>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_QMARK: engram_shift_QMARK_EXCL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp QMARK>, <&kp EXCL>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_HASH: engram_shift_HASH_DLLR {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp HASH>, <&kp DLLR>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_AT: engram_shift_AT_GRAVE {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp AT>, <&kp GRAVE>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
engram_FSLH: engram_shift_FSLH_BSLH {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&kp FSLH>, <&kp BSLH>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
behavior_caps_word {
continue-list = <
UNDERSCORE MINUS
BACKSPACE DELETE
N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
>;
};
};
macros {
ZMK_MACRO(linux_magic_sysrq,
wait-ms = <0>;
tap-ms = <0>;
bindings
= <&macro_press &mo 0 &kp RALT>
, <&macro_tap &kp PRINTSCREEN>
, <&macro_pause_for_release>
, <&macro_release &mo 0 &kp RALT>
;
)
mod_tab: mod_tab_switcher {
compatible = "zmk,behavior-macro-one-param";
wait-ms = <0>;
tap-ms = <0>;
#binding-cells = <1>;
bindings
= <&macro_param_1to1>
, <&macro_press &kp MACRO_PLACEHOLDER>
, <&macro_tap &kp TAB>
, <&macro_pause_for_release>
, <&macro_param_1to1>
, <&macro_release &kp MACRO_PLACEHOLDER>
;
};
#ifndef SELECT_WORD_DELAY
#define SELECT_WORD_DELAY 1
#endif
ZMK_MACRO(select_none,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
)
select_word: select_word {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&select_word_right>, <&select_word_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(select_word_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
)
ZMK_MACRO(select_word_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
)
extend_word: extend_word {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&extend_word_right>, <&extend_word_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(extend_word_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(LS(RIGHT))>;
)
ZMK_MACRO(extend_word_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _W(LS(LEFT))>;
)
select_line: select_line {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&select_line_right>, <&select_line_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(select_line_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _HOME &kp LS(_END)>;
)
ZMK_MACRO(select_line_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp _END &kp LS(_HOME)>;
)
extend_line: extend_line {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&extend_line_right>, <&extend_line_left>;
mods = <(MOD_LSFT|MOD_RSFT)>;
};
ZMK_MACRO(extend_line_right,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp LS(DOWN) &kp LS(_END)>;
)
ZMK_MACRO(extend_line_left,
wait-ms = <SELECT_WORD_DELAY>;
tap-ms = <SELECT_WORD_DELAY>;
bindings = <&kp LS(UP) &kp LS(_HOME)>;
)
#ifndef UNICODE_TARGET_OS
#define UNICODE_TARGET_OS OPERATING_SYSTEM
#endif
#ifndef UNICODE_TAP_DELAY
#define UNICODE_TAP_DELAY 1
#endif
#ifndef UNICODE_SEQ_DELAY
#define UNICODE_SEQ_DELAY 10
#endif
#define UNICODE(name, ...) \
ZMK_MACRO(name, \
wait-ms = <UNICODE_TAP_DELAY>; \
tap-ms = <UNICODE_TAP_DELAY>; \
bindings = __VA_ARGS__; \
)
#ifndef UNICODE_SEQ_LINUX
#define UNICODE_SEQ_LINUX(keystrokes) \
<&macro_tap &kp LC(LS(U)) keystrokes &kp ENTER>
#endif
#ifndef UNICODE_SEQ_MACOS
#define UNICODE_SEQ_MACOS(keystrokes) \
<&macro_press &kp LALT> ,\
<&macro_tap keystrokes> ,\
<&macro_release &kp LALT>
#endif
#ifndef UNICODE_SEQ_WINDOWS
#define UNICODE_SEQ_WINDOWS(keystrokes) \
<&macro_tap &kp RA(U) keystrokes &kp ENTER>
#endif
#ifndef COMPOSE_KEY_LINUX
#define COMPOSE_KEY_LINUX RALT
#endif
#ifndef COMPOSE_SEQ_LINUX
#define COMPOSE_SEQ_LINUX(keystrokes) \
<&macro_tap &kp COMPOSE_KEY_LINUX keystrokes>
#endif
#ifndef COMPOSE_SEQ_MACOS
#define COMPOSE_SEQ_MACOS(keystrokes) \
<&macro_tap keystrokes>
#endif
#ifndef COMPOSE_SEQ_WINDOWS
#define COMPOSE_SEQ_WINDOWS(keystrokes) \
<&macro_press &kp LALT>, \
<&macro_tap keystrokes>, \
<&macro_release &kp LALT>
#endif
UNICODE(world_degree_sign, /* ° */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp B &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp B &kp N0)
#endif
)
UNICODE(world_section_sign, /* § */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp N7)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N7)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp N7)
#endif
)
UNICODE(world_paragraph_sign, /* ¶ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp B &kp N6)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N6)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp B &kp N6)
#endif
)
UNICODE(world_o_ordinal, /* º */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp B &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp B &kp A)
#endif
)
UNICODE(world_a_ordinal, /* ª */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp A)
#endif
)
UNICODE(world_exclaim_left, /* ¡ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp N1)
#endif
)
UNICODE(world_question_left, /* ¿ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp B &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp B &kp F)
#endif
)
UNICODE(world_currency_crypto, /* ₿ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp B &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp B &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp B &kp F)
#endif
)
UNICODE(world_currency_cent, /* ¢ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp N2)
#endif
)
UNICODE(world_currency_sign, /* ¤ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp N4)
#endif
)
UNICODE(world_c_cedilla_lower, /* ç */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp COMMA &kp C)
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(C))
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N1)
#endif
)
UNICODE(world_c_cedilla_upper, /* Ç */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp COMMA &kp LS(C))
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(LS(C)))
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N9)
#endif
)
world_c_cedilla: world_c_cedilla {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_c_cedilla_lower>, <&world_c_cedilla_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_acute_lower, /* í */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp SQT &kp I)
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(E) &kp I)
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7)
#endif
)
UNICODE(world_i_acute_upper, /* Í */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp SQT &kp LS(I))
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(I))
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5)
#endif
)
world_i_acute: world_i_acute {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_diaeresis_lower, /* ï */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp F)
#endif
)
UNICODE(world_i_diaeresis_upper, /* Ï */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp F)
#endif
)
world_i_diaeresis: world_i_diaeresis {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_circumflex_lower, /* î */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp E)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp E)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp E)
#endif
)
UNICODE(world_i_circumflex_upper, /* Î */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp E)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp E)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp E)
#endif
)
world_i_circumflex: world_i_circumflex {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_i_grave_lower, /* ì */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp C)
#endif
)
UNICODE(world_i_grave_upper, /* Ì */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp C)
#endif
)
world_i_grave: world_i_grave {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_acute_lower, /* é */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N9)
#endif
)
UNICODE(world_e_acute_upper, /* É */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N9)
#endif
)
world_e_acute: world_e_acute {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_diaeresis_lower, /* ë */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp B)
#endif
)
UNICODE(world_e_diaeresis_upper, /* Ë */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp B)
#endif
)
world_e_diaeresis: world_e_diaeresis {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_circumflex_lower, /* ê */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp A)
#endif
)
UNICODE(world_e_circumflex_upper, /* Ê */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp A)
#endif
)
world_e_circumflex: world_e_circumflex {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_grave_lower, /* è */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N8)
#endif
)
UNICODE(world_e_grave_upper, /* È */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N8)
#endif
)
world_e_grave: world_e_grave {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_e_ae_lower, /* æ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N6)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N6)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N6)
#endif
)
UNICODE(world_e_ae_upper, /* Æ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N6)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N6)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N6)
#endif
)
world_e_ae: world_e_ae {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_acute_lower, /* á */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N1)
#endif
)
UNICODE(world_a_acute_upper, /* Á */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N1)
#endif
)
world_a_acute: world_a_acute {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_diaeresis_lower, /* ä */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp DQT &kp A)
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(U) &kp A)
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8)
#endif
)
UNICODE(world_a_diaeresis_upper, /* Ä */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp DQT &kp LS(A))
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(A))
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6)
#endif
)
world_a_diaeresis: world_a_diaeresis {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_circumflex_lower, /* â */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N2)
#endif
)
UNICODE(world_a_circumflex_upper, /* Â */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N2)
#endif
)
world_a_circumflex: world_a_circumflex {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_grave_lower, /* à */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N0)
#endif
)
UNICODE(world_a_grave_upper, /* À */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N0)
#endif
)
world_a_grave: world_a_grave {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_tilde_lower, /* ã */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N3)
#endif
)
UNICODE(world_a_tilde_upper, /* Ã */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N3)
#endif
)
world_a_tilde: world_a_tilde {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_a_ring_lower, /* å */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp E &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp E &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp E &kp N5)
#endif
)
UNICODE(world_a_ring_upper, /* Å */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp C &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp C &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp C &kp N5)
#endif
)
world_a_ring: world_a_ring {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_y_acute_lower, /* ý */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp D)
#endif
)
UNICODE(world_y_acute_upper, /* Ý */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp D)
#endif
)
world_y_acute: world_y_acute {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_y_diaeresis_lower, /* ÿ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp F)
#endif
)
UNICODE(world_y_diaeresis_upper, /* Ÿ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp N7 &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N1 &kp N7 &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp N7 &kp N8)
#endif
)
world_y_diaeresis: world_y_diaeresis {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_acute_lower, /* ó */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp N3)
#endif
)
UNICODE(world_o_acute_upper, /* Ó */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp N3)
#endif
)
world_o_acute: world_o_acute {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_diaeresis_lower, /* ö */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp DQT &kp O)
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(U) &kp O)
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6)
#endif
)
UNICODE(world_o_diaeresis_upper, /* Ö */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp DQT &kp LS(O))
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(O))
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4)
#endif
)
world_o_diaeresis: world_o_diaeresis {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_circumflex_lower, /* ô */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp N4)
#endif
)
UNICODE(world_o_circumflex_upper, /* Ô */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp N4)
#endif
)
world_o_circumflex: world_o_circumflex {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_grave_lower, /* ò */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp N2)
#endif
)
UNICODE(world_o_grave_upper, /* Ò */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp N2)
#endif
)
world_o_grave: world_o_grave {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_tilde_lower, /* õ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp N5)
#endif
)
UNICODE(world_o_tilde_upper, /* Õ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp N5)
#endif
)
world_o_tilde: world_o_tilde {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_o_slash_lower, /* ø */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp N8)
#endif
)
UNICODE(world_o_slash_upper, /* Ø */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp N8)
#endif
)
world_o_slash: world_o_slash {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_acute_lower, /* ú */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp A)
#endif
)
UNICODE(world_u_acute_upper, /* Ú */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp A)
#endif
)
world_u_acute: world_u_acute {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_diaeresis_lower, /* ü */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp DQT &kp U)
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(U) &kp U)
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2)
#endif
)
UNICODE(world_u_diaeresis_upper, /* Ü */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp DQT &kp LS(U))
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(U))
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0)
#endif
)
world_u_diaeresis: world_u_diaeresis {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_circumflex_lower, /* û */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp B)
#endif
)
UNICODE(world_u_circumflex_upper, /* Û */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp B)
#endif
)
world_u_circumflex: world_u_circumflex {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_u_grave_lower, /* ù */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp N9)
#endif
)
UNICODE(world_u_grave_upper, /* Ù */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp N9)
#endif
)
world_u_grave: world_u_grave {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_n_tilde_lower, /* ñ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp F &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp N1)
#endif
)
UNICODE(world_n_tilde_upper, /* Ñ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp D &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp D &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp D &kp N1)
#endif
)
world_n_tilde: world_n_tilde {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_n_tilde_lower>, <&world_n_tilde_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_left_angle_lower, /* ‹ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N3 &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N3 &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N3 &kp N9)
#endif
)
UNICODE(world_quotes_left_angle_upper, /* « */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp B)
#endif
)
world_quotes_left_angle: world_quotes_left_angle {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_angle_lower>, <&world_quotes_left_angle_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_left_curly_lower, /* ‘ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp N8)
#endif
)
UNICODE(world_quotes_left_curly_upper, /* “ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp C)
#endif
)
world_quotes_left_curly: world_quotes_left_curly {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_curly_lower>, <&world_quotes_left_curly_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_left_low_lower, /* ‚ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp A)
#endif
)
UNICODE(world_quotes_left_low_upper, /* „ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp E)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp E)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp E)
#endif
)
world_quotes_left_low: world_quotes_left_low {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_left_corner1_lower, /* 「 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp C)
#endif
)
UNICODE(world_quotes_left_corner1_upper, /* ﹁ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N1)
#endif
)
world_quotes_left_corner1: world_quotes_left_corner1 {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_corner1_lower>, <&world_quotes_left_corner1_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_left_corner2_lower, /* 『 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp E)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp E)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp E)
#endif
)
UNICODE(world_quotes_left_corner2_upper, /* ﹃ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N3)
#endif
)
world_quotes_left_corner2: world_quotes_left_corner2 {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_corner2_lower>, <&world_quotes_left_corner2_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_left_grave, /* ` */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N6 &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp N6 &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N6 &kp N0)
#endif
)
UNICODE(world_quotes_right_angle_lower, /* › */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N3 &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N3 &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N3 &kp A)
#endif
)
UNICODE(world_quotes_right_angle_upper, /* » */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp B &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp B &kp B)
#endif
)
world_quotes_right_angle: world_quotes_right_angle {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_angle_lower>, <&world_quotes_right_angle_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_right_curly_lower, /* ’ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp N9)
#endif
)
UNICODE(world_quotes_right_curly_upper, /* ” */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N1 &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N1 &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N1 &kp D)
#endif
)
world_quotes_right_curly: world_quotes_right_curly {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_curly_lower>, <&world_quotes_right_curly_upper>;
mods = <MOD_LSFT>;
};
world_quotes_right_low: world_quotes_right_low {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_right_corner1_lower, /* 」 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp D)
#endif
)
UNICODE(world_quotes_right_corner1_upper, /* ﹂ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N2)
#endif
)
world_quotes_right_corner1: world_quotes_right_corner1 {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_corner1_lower>, <&world_quotes_right_corner1_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_right_corner2_lower, /* 』 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N3 &kp N0 &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N3 &kp N0 &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N3 &kp N0 &kp N0 &kp F)
#endif
)
UNICODE(world_quotes_right_corner2_upper, /* ﹄ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N4 &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N4 &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N4 &kp N4)
#endif
)
world_quotes_right_corner2: world_quotes_right_corner2 {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_corner2_lower>, <&world_quotes_right_corner2_upper>;
mods = <MOD_LSFT>;
};
UNICODE(world_quotes_right_grave, /* ´ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp B &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp B &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp B &kp N4)
#endif
)
UNICODE(world_currency_dollar_lower, /* $ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp N2 &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N4)
#endif
)
world_currency_dollar: world_currency_dollar {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_currency_dollar_lower>, <&world_currency_cent>;
mods = <MOD_LSFT>;
};
UNICODE(world_currency_yen, /* ¥ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp N5)
#endif
)
UNICODE(world_currency_euro, /* € */
#if UNICODE_TARGET_OS == 1
COMPOSE_SEQ_LINUX(&kp E &kp EQUAL)
#elif UNICODE_TARGET_OS == 2
COMPOSE_SEQ_MACOS(&kp LA(LS(N2)))
#elif UNICODE_TARGET_OS == 3
COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8)
#endif
)
UNICODE(world_currency_won, /* ₩ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp A &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp A &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp A &kp N9)
#endif
)
UNICODE(world_currency_pound, /* £ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp A &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N0 &kp N0 &kp A &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp A &kp N3)
#endif
)
world_currency_generic: world_currency_generic {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_currency_sign>, <&world_currency_crypto>;
mods = <MOD_LSFT>;
};
world_i_base: world_i_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_i_acute>, <&world_i_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_i_LCTL: world_i_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_i_RCTL: world_i_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_i_circumflex>, <&world_i_grave>;
mods = <(MOD_RSFT)>;
};
world_e_base: world_e_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_acute>, <&world_e_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_e_RALT: world_e_RALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_ae>, <&world_e_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_e_LCTL: world_e_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_e_RCTL: world_e_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_e_circumflex>, <&world_e_grave>;
mods = <(MOD_RSFT)>;
};
world_a_base: world_a_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_acute>, <&world_a_LALT>;
mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_a_LALT: world_a_LALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_tilde>, <&world_a_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_a_RALT: world_a_RALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_ring>, <&world_a_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_a_LCTL: world_a_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_a_RCTL: world_a_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_a_circumflex>, <&world_a_grave>;
mods = <(MOD_RSFT)>;
};
world_y_base: world_y_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_y_acute>, <&world_y_diaeresis>;
mods = <(MOD_LCTL)>;
};
world_o_base: world_o_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_acute>, <&world_o_LALT>;
mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_o_LALT: world_o_LALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_tilde>, <&world_o_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_o_RALT: world_o_RALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_slash>, <&world_o_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_o_LCTL: world_o_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_o_RCTL: world_o_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_o_circumflex>, <&world_o_grave>;
mods = <(MOD_RSFT)>;
};
world_u_base: world_u_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_u_acute>, <&world_u_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_u_LCTL: world_u_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_u_RCTL: world_u_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_u_circumflex>, <&world_u_grave>;
mods = <(MOD_RSFT)>;
};
world_quotes_left_base: world_quotes_left_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_angle>, <&world_quotes_left_LALT>;
mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_left_LALT: world_quotes_left_LALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_corner1>, <&world_quotes_left_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_left_RALT: world_quotes_left_RALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_corner2>, <&world_quotes_left_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_left_LCTL: world_quotes_left_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_curly>, <&world_quotes_left_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_quotes_left_RCTL: world_quotes_left_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_left_low>, <&world_quotes_left_grave>;
mods = <(MOD_RSFT)>;
};
world_quotes_right_base: world_quotes_right_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_angle>, <&world_quotes_right_LALT>;
mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_right_LALT: world_quotes_right_LALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_corner1>, <&world_quotes_right_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_right_RALT: world_quotes_right_RALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_corner2>, <&world_quotes_right_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_quotes_right_LCTL: world_quotes_right_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_curly>, <&world_quotes_right_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_quotes_right_RCTL: world_quotes_right_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_quotes_right_low>, <&world_quotes_right_grave>;
mods = <(MOD_RSFT)>;
};
world_currency_base: world_currency_base {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_currency_dollar>, <&world_currency_LALT>;
mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_currency_LALT: world_currency_LALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_currency_yen>, <&world_currency_RALT>;
mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_currency_RALT: world_currency_RALT {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_currency_won>, <&world_currency_LCTL>;
mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
};
world_currency_LCTL: world_currency_LCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_currency_euro>, <&world_currency_RCTL>;
mods = <(MOD_RCTL|MOD_RSFT)>;
};
world_currency_RCTL: world_currency_RCTL {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&world_currency_pound>, <&world_currency_generic>;
mods = <(MOD_RSFT)>;
};
#ifndef EMOJI_GENDER_SIGN_PRESET
#define EMOJI_GENDER_SIGN_PRESET 1 
#endif
#ifndef EMOJI_SKIN_TONE_PRESET
#define EMOJI_SKIN_TONE_PRESET 4 
#endif
#ifndef EMOJI_HAIR_STYLE_PRESET
#define EMOJI_HAIR_STYLE_PRESET 4 
#endif
UNICODE(emoji_zwj, /* ‍ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N0 &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N0 &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N0 &kp D)
#endif
)
UNICODE(emoji_male_sign, /* ♂️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N6 &kp N4 &kp N2), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N6 &kp N4 &kp N2), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N6 &kp N4 &kp N2), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_female_sign, /* ♀️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N6 &kp N4 &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N6 &kp N4 &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N6 &kp N4 &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_right_arrow, /* ➡️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N7 &kp A &kp N1), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N7 &kp A &kp N1), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N7 &kp A &kp N1), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_left_arrow, /* ⬅️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp B &kp N0 &kp N5), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp B &kp N0 &kp N5), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp B &kp N0 &kp N5), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_rainbow, /* 🌈 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N0 &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N0 &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N0 &kp N8)
#endif
)
UNICODE(emoji_cloudy, /* ️☁️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp N2 &kp N6 &kp N0 &kp N1), UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp N2 &kp N6 &kp N0 &kp N1), UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp N2 &kp N6 &kp N0 &kp N1), UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_mostly_cloudy, /* 🌥 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N2 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N2 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N2 &kp N5)
#endif
)
UNICODE(emoji_partly_cloudy, /* ⛅ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N6 &kp C &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N6 &kp C &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N6 &kp C &kp N5)
#endif
)
UNICODE(emoji_mostly_sunny, /* ️🌤️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N2 &kp N4), UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N2 &kp N4), UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N2 &kp N4), UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_sunny, /* ☀️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N6 &kp N0 &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N6 &kp N0 &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N6 &kp N0 &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_sunrise, /* 🌅 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N0 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N0 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N0 &kp N5)
#endif
)
UNICODE(emoji_sunrise_mountains, /* 🌄 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N0 &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N0 &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N0 &kp N4)
#endif
)
UNICODE(emoji_cityscape, /* ️🏙️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp D &kp N9), UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp D &kp N9), UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp D &kp N9), UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_cityscape_dusk, /* ️🌇 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N0 &kp N7)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N0 &kp N7)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N0 &kp N7)
#endif
)
UNICODE(emoji_cityscape_night, /* 🌃 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N0 &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N0 &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N0 &kp N3)
#endif
)
UNICODE(emoji_light_skin_tone, /* 🏻 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp F &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp F &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp F &kp B)
#endif
)
UNICODE(emoji_medium_light_skin_tone, /* 🏼 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp F &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp F &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp F &kp C)
#endif
)
UNICODE(emoji_medium_skin_tone, /* 🏽 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp F &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp F &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp F &kp D)
#endif
)
UNICODE(emoji_medium_dark_skin_tone, /* 🏾 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp F &kp E)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp F &kp E)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp F &kp E)
#endif
)
UNICODE(emoji_dark_skin_tone, /* 🏿 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp F &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp F &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp F &kp F)
#endif
)
UNICODE(emoji_baby_bottle, /* 🍼 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N7 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N7 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N7 &kp C)
#endif
)
UNICODE(emoji_baby, /* 👶 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N7 &kp N6)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N7 &kp N6)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N7 &kp N6)
#endif
)
UNICODE(emoji_boy, /* 👦 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N6 &kp N6)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N6 &kp N6)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N6 &kp N6)
#endif
)
UNICODE(emoji_girl, /* 👧 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N6 &kp N7)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N6 &kp N7)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N6 &kp N7)
#endif
)
UNICODE(emoji_man, /* 👨 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N6 &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N6 &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N6 &kp N8)
#endif
)
UNICODE(emoji_woman, /* 👩 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N6 &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N6 &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N6 &kp N9)
#endif
)
UNICODE(emoji_old_man, /* 👴 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N7 &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N7 &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N7 &kp N4)
#endif
)
UNICODE(emoji_old_woman, /* 👵 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N7 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N7 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N7 &kp N5)
#endif
)
UNICODE(emoji_white_hair, /* 🦳 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp B &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp B &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp B &kp N3)
#endif
)
UNICODE(emoji_curly_hair, /* 🦱 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp B &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp B &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp B &kp N1)
#endif
)
UNICODE(emoji_red_hair, /* 🦰 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp B &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp B &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp B &kp N0)
#endif
)
UNICODE(emoji_bald, /* 🦲 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp B &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp B &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp B &kp N2)
#endif
)
UNICODE(emoji_new_moon, /* 🌑 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N1)
#endif
)
UNICODE(emoji_waxing_crescent_moon, /* 🌒 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N2)
#endif
)
UNICODE(emoji_first_quarter_moon, /* 🌓 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N3)
#endif
)
UNICODE(emoji_waxing_gibbous_moon, /* 🌔 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N4)
#endif
)
UNICODE(emoji_full_moon, /* 🌕 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N5)
#endif
)
UNICODE(emoji_waning_gibbous_moon, /* 🌖 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N6)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N6)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N6)
#endif
)
UNICODE(emoji_last_quarter_moon, /* 🌗 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N7)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N7)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N7)
#endif
)
UNICODE(emoji_waning_crescent_moon, /* 🌘 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N1 &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N1 &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N1 &kp N8)
#endif
)
UNICODE(emoji_tada, /* 🎉 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N3 &kp N8 &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N3 &kp N8 &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N3 &kp N8 &kp N9)
#endif
)
UNICODE(emoji_heart, /* ️❤️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp N2 &kp N7 &kp N6 &kp N4), UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp N2 &kp N7 &kp N6 &kp N4), UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp N2 &kp N7 &kp N6 &kp N4), UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_fire, /* 🔥 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N5 &kp N2 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N5 &kp N2 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N5 &kp N2 &kp N5)
#endif
)
UNICODE(emoji_muscle, /* 💪 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp A &kp A)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp A &kp A)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp A &kp A)
#endif
)
UNICODE(emoji_person_climbing, /* 🧗 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp D &kp N7)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp D &kp N7)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp D &kp N7)
#endif
)
UNICODE(emoji_lab_coat, /* 🥼 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp N7 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp N7 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp N7 &kp C)
#endif
)
UNICODE(emoji_rocket, /* 🚀 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N8 &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N8 &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N8 &kp N0)
#endif
)
UNICODE(emoji_joy, /* 😂 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N0 &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N0 &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N0 &kp N2)
#endif
)
UNICODE(emoji_rofl, /* 🤣 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp N2 &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp N2 &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp N2 &kp N3)
#endif
)
UNICODE(emoji_star_struck, /* 🤩 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp N2 &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp N2 &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp N2 &kp N9)
#endif
)
UNICODE(emoji_love_struck, /* 😍 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N0 &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N0 &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N0 &kp D)
#endif
)
UNICODE(emoji_saluting_face, /* 🫡 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp A &kp E &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp A &kp E &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp A &kp E &kp N1)
#endif
)
UNICODE(emoji_shocked_face, /* 🤯 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp N2 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp N2 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp N2 &kp F)
#endif
)
UNICODE(emoji_cold_sweat, /* 😰 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N3 &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N3 &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N3 &kp N0)
#endif
)
UNICODE(emoji_monocle_face, /* 🧐 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp D &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp D &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp D &kp N0)
#endif
)
UNICODE(emoji_snap_fingers, /* 🫰 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp A &kp F &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp A &kp F &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp A &kp F &kp N0)
#endif
)
UNICODE(emoji_ok_hand, /* 👌 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N4 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N4 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N4 &kp C)
#endif
)
UNICODE(emoji_pray, /* 🙏 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp F)
#endif
)
UNICODE(emoji_sweat_smile, /* 😅 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N0 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N0 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N0 &kp N5)
#endif
)
UNICODE(emoji_disappointed, /* 😞 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N1 &kp E)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N1 &kp E)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N1 &kp E)
#endif
)
UNICODE(emoji_thinking, /* 🤔 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp N1 &kp N4)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp N1 &kp N4)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp N1 &kp N4)
#endif
)
UNICODE(emoji_person_tipping_hand, /* 💁 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N8 &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N8 &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N8 &kp N1)
#endif
)
UNICODE(emoji_person_gesturing_ok, /* 🙆 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp N6)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp N6)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp N6)
#endif
)
UNICODE(emoji_person_bowing, /* 🙇 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp N7)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp N7)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp N7)
#endif
)
UNICODE(emoji_person_raising_hand, /* 🙋 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp B)
#endif
)
UNICODE(emoji_person_gesturing_no, /* 🙅 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp N5)
#endif
)
UNICODE(emoji_person_shrugging, /* 🤷 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp N3 &kp N7)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp N3 &kp N7)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp N3 &kp N7)
#endif
)
UNICODE(emoji_checkoff, /* ✅ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N7 &kp N0 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N7 &kp N0 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N7 &kp N0 &kp N5)
#endif
)
UNICODE(emoji_100, /* 💯 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp A &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp A &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp A &kp F)
#endif
)
UNICODE(emoji_warning, /* ⚠️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N6 &kp A &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N6 &kp A &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N6 &kp A &kp N0), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_x, /* ❌ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N7 &kp N4 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N7 &kp N4 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N7 &kp N4 &kp C)
#endif
)
UNICODE(emoji_question, /* ❓ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N7 &kp N5 &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N7 &kp N5 &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N7 &kp N5 &kp N3)
#endif
)
UNICODE(emoji_astronaut, /* 🧑‍🚀 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp D &kp N1), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp N2 &kp N0 &kp N0 &kp D), UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N8 &kp N0)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp D &kp N1), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp N2 &kp N0 &kp N0 &kp D), UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N8 &kp N0)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp D &kp N1), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp N2 &kp N0 &kp N0 &kp D), UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N8 &kp N0)
#endif
)
UNICODE(emoji_nerd, /* 🤓 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N9 &kp N1 &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N9 &kp N1 &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N9 &kp N1 &kp N3)
#endif
)
UNICODE(emoji_sparkles, /* ✨ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N7 &kp N2 &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N7 &kp N2 &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N7 &kp N2 &kp N8)
#endif
)
UNICODE(emoji_raised_hands, /* 🙌 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp C)
#endif
)
UNICODE(emoji_point_up, /* ☝️ */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N2 &kp N6 &kp N1 &kp D), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_LINUX(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N2 &kp N6 &kp N1 &kp D), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_MACOS(&kp F &kp E &kp N0 &kp F)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N2 &kp N6 &kp N1 &kp D), <&macro_wait_time UNICODE_SEQ_DELAY>, UNICODE_SEQ_WINDOWS(&kp F &kp E &kp N0 &kp F)
#endif
)
UNICODE(emoji_thumbs_up, /* 👍 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N4 &kp D)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N4 &kp D)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N4 &kp D)
#endif
)
emoji_moon_complete: emoji_moon_complete {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_new_moon>, <&emoji_full_moon>;
mods = <MOD_LSFT>;
};
emoji_moon_gibbous: emoji_moon_gibbous {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_waning_gibbous_moon>, <&emoji_waxing_gibbous_moon>;
mods = <MOD_LSFT>;
};
emoji_moon_quarter: emoji_moon_quarter {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_last_quarter_moon>, <&emoji_first_quarter_moon>;
mods = <MOD_LSFT>;
};
emoji_moon_crescent: emoji_moon_crescent {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_waning_crescent_moon>, <&emoji_waxing_crescent_moon>;
mods = <MOD_LSFT>;
};
UNICODE(emoji_face_smile_up, /* 🙂 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp N2)
#endif
)
UNICODE(emoji_face_smile_down, /* 🙃 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N4 &kp N3)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N4 &kp N3)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N4 &kp N3)
#endif
)
emoji_face_smile: emoji_face_smile {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_face_smile_up>, <&emoji_face_smile_down>;
mods = <MOD_LSFT>;
};
emoji_face_laugh: emoji_face_laugh {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_joy>, <&emoji_rofl>;
mods = <MOD_LSFT>;
};
emoji_face_eyes: emoji_face_eyes {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_star_struck>, <&emoji_love_struck>;
mods = <MOD_LSFT>;
};
UNICODE(emoji_face_joke_wink, /* 😉 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N0 &kp N9)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N0 &kp N9)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N0 &kp N9)
#endif
)
UNICODE(emoji_face_joke_tounge, /* 😜 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N1 &kp C)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N1 &kp C)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N1 &kp C)
#endif
)
emoji_face_joke: emoji_face_joke {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_face_joke_wink>, <&emoji_face_joke_tounge>;
mods = <MOD_LSFT>;
};
UNICODE(emoji_face_fear_scared, /* 😨 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N2 &kp N8)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N2 &kp N8)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N2 &kp N8)
#endif
)
UNICODE(emoji_face_fear_scream, /* 😱 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N3 &kp N1)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N3 &kp N1)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N3 &kp N1)
#endif
)
emoji_face_fear: emoji_face_fear {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_face_fear_scared>, <&emoji_face_fear_scream>;
mods = <MOD_LSFT>;
};
UNICODE(emoji_face_surprise_dizzy, /* 😵 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N3 &kp N5)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N3 &kp N5)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N3 &kp N5)
#endif
)
emoji_face_surprise: emoji_face_surprise {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_shocked_face>, <&emoji_face_surprise_dizzy>;
mods = <MOD_LSFT>;
};
UNICODE(emoji_gesture_attention_wave, /* 👋 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N4 &kp N4 &kp B)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N4 &kp N4 &kp B)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N4 &kp N4 &kp B)
#endif
)
emoji_gesture_attention: emoji_gesture_attention {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_snap_fingers>, <&emoji_gesture_attention_wave>;
mods = <MOD_LSFT>;
};
UNICODE(emoji_gesture_approval_cool, /* 😎 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N0 &kp E)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N0 &kp E)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N0 &kp E)
#endif
)
emoji_gesture_approval: emoji_gesture_approval {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_ok_hand>, <&emoji_gesture_approval_cool>;
mods = <MOD_LSFT>;
};
emoji_gesture_gratitude: emoji_gesture_gratitude {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_pray>, <&emoji_saluting_face>;
mods = <MOD_LSFT>;
};
emoji_gesture_anxiety: emoji_gesture_anxiety {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_sweat_smile>, <&emoji_cold_sweat>;
mods = <MOD_LSFT>;
};
UNICODE(emoji_gesture_despair_cry, /* 😢 */
#if UNICODE_TARGET_OS == 1
UNICODE_SEQ_LINUX(&kp N1 &kp F &kp N6 &kp N2 &kp N2)
#elif UNICODE_TARGET_OS == 2
UNICODE_SEQ_MACOS(&kp N1 &kp F &kp N6 &kp N2 &kp N2)
#elif UNICODE_TARGET_OS == 3
UNICODE_SEQ_WINDOWS(&kp N1 &kp F &kp N6 &kp N2 &kp N2)
#endif
)
emoji_gesture_despair: emoji_gesture_despair {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_disappointed>, <&emoji_gesture_despair_cry>;
mods = <MOD_LSFT>;
};
emoji_gesture_curious: emoji_gesture_curious {
compatible = "zmk,behavior-mod-morph";
#binding-cells = <0>;
bindings = <&emoji_thinking>, <&emoji_monocle_face>;
mods = <MOD_LSFT>;
};
};
/*HACK*/};
#if EMOJI_GENDER_SIGN_PRESET == 0
emoji_gender_sign_preset: &none {};
#elif EMOJI_GENDER_SIGN_PRESET == 1
emoji_gender_sign_preset: &emoji_male_sign {};
#elif EMOJI_GENDER_SIGN_PRESET == 2
emoji_gender_sign_preset: &emoji_female_sign {};
#endif
#if EMOJI_SKIN_TONE_PRESET == 0
emoji_skin_tone_preset: &none {};
#elif EMOJI_SKIN_TONE_PRESET == 1
emoji_skin_tone_preset: &emoji_light_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 2
emoji_skin_tone_preset: &emoji_medium_light_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 3
emoji_skin_tone_preset: &emoji_medium_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 4
emoji_skin_tone_preset: &emoji_medium_dark_skin_tone {};
#elif EMOJI_SKIN_TONE_PRESET == 5
emoji_skin_tone_preset: &emoji_dark_skin_tone {};
#endif
#if EMOJI_HAIR_STYLE_PRESET == 0
emoji_hair_style_preset: &none {};
#elif EMOJI_HAIR_STYLE_PRESET == 1
emoji_hair_style_preset: &emoji_bald {};
#elif EMOJI_HAIR_STYLE_PRESET == 2
emoji_hair_style_preset: &emoji_red_hair {};
#elif EMOJI_HAIR_STYLE_PRESET == 3
emoji_hair_style_preset: &emoji_curly_hair {};
#elif EMOJI_HAIR_STYLE_PRESET == 4
emoji_hair_style_preset: &emoji_white_hair {};
#endif
/*HACK*//{
#ifndef MOUSE_MOTION_DELAY
#define MOUSE_MOTION_DELAY 0
#endif
#ifndef MOUSE_MOTION_ACCELERATION_EXPONENT
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1
#endif
#ifndef MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300
#endif
#ifndef MOUSE_MOTION_MAXIMUM_SPEED
#define MOUSE_MOTION_MAXIMUM_SPEED 600
#endif
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 300
#endif
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 10
#endif
/*HACK*/};
#if __has_include(<zmk/events/mouse_tick.h>)
#define ZMK_MOUSE_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#define ZMK_MOUSE_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED
#include <dt-bindings/zmk/mouse.h>
&mmv {
delay-ms = <MOUSE_MOTION_DELAY>;
acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};
&msc {
delay-ms = <MOUSE_SCROLL_DELAY>;
acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};
#else
#define mkp none
#define mmv none
#define msc none
#define LCLK
#define MCLK
#define RCLK
#define MB1
#define MB2
#define MB3
#define MB4
#define MB5
#define MB6
#define MB7
#define MB8
#define MOVE_UP
#define MOVE_DOWN
#define MOVE_LEFT
#define MOVE_RIGHT
#define SCRL_UP
#define SCRL_DOWN
#define SCRL_LEFT
#define SCRL_RIGHT
#endif
/*HACK*//{
